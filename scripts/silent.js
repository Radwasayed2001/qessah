// scripts/charades.js
// Dependencies: loadPlayers(), showScreen(id)

document.addEventListener('DOMContentLoaded', () => {
  const players = loadPlayers();
  let roundTime     = 60;
  let actorIndex    = 0;
  let timerId       = null;
  let teamA = [], teamB = [];
  let currentPair   = null;
  let changeCount   = 2;

  // ŸÖÿ¨ŸÖŸàÿπÿ© ÿßŸÑÿ£ÿ≤Ÿàÿßÿ¨ (ŸÖŸàÿ∂Ÿàÿπ + ÿπŸÜŸàÿßŸÜ)
  const titles      = [ { topic: 'ŸÖÿ≥ŸÑÿ≥ŸÑ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä', title: 'ŸÑŸÜ ÿ£ÿπŸäÿ¥ ŸÅŸä ÿ¨ŸÑÿ®ÿßÿ® ÿ£ÿ®Ÿä' },
    { topic: 'ŸÖÿ≥ŸÑÿ≥ŸÑ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä', title: 'ÿµÿßÿ≠ÿ®ÿ© ÿßŸÑÿ≥ÿπÿßÿØÿ©' },
    { topic: 'ŸÖÿ≥ŸÑÿ≥ŸÑ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä', title: 'ŸÉŸäÿØ ÿßŸÑŸÜÿ≥ÿß' },
    { topic: 'ŸÖÿ≥ŸÑÿ≥ŸÑ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä', title: 'ÿ±ÿ£ŸÅÿ™ ÿßŸÑŸáÿ¨ÿßŸÜ' },
    { topic: 'ŸÅŸäŸÑŸÖ ÿ≥ŸäŸÜŸÖÿßÿ¶Ÿä',     title: 'ÿπŸÖÿßÿ±ÿ© ŸäÿπŸÇŸàÿ®ŸäÿßŸÜ' },
    { topic: 'ŸÅŸäŸÑŸÖ ÿ≥ŸäŸÜŸÖÿßÿ¶Ÿä',     title: 'ÿµÿπŸäÿØŸä ŸÅŸä ÿßŸÑÿ¨ÿßŸÖÿπÿ© ÿßŸÑÿ£ŸÖÿ±ŸäŸÉŸäÿ©' },
    { topic: 'ŸÅŸäŸÑŸÖ ÿ≥ŸäŸÜŸÖÿßÿ¶Ÿä',     title: 'ÿ•ÿ≥ŸÖÿßÿπŸäŸÑŸäÿ© ÿ±ÿßŸäÿ≠ ÿ¨ÿßŸä' },
    { topic: 'ŸÅŸäŸÑŸÖ ÿ≥ŸäŸÜŸÖÿßÿ¶Ÿä',     title: 'ÿ£ÿ®ÿØÿß ÿ£ŸáŸÑÿß ŸàŸÑŸà ÿ®ÿπÿØ ÿ≠ŸäŸÜ' },
    { topic: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä',  title: 'ÿ≥ÿ™ ÿßŸÑÿ≥ÿ™ÿßÿ™' },
    { topic: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä',  title: 'ÿ™ÿÆÿßÿ±ŸäŸÅ' },
    { topic: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä',  title: 'ÿ±ÿßŸÖÿ≤ ÿ¨ŸÑÿßŸÑ' },
    { topic: 'ÿ®ÿ±ŸÜÿßŸÖÿ¨ ÿ™ŸÑŸÅÿ≤ŸäŸàŸÜŸä',  title: 'ÿÆŸàÿßÿ∑ÿ±' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ÿ™ÿßÿ±ŸäÿÆŸäÿ©',    title: 'ÿµŸÑÿßÿ≠ ÿßŸÑÿØŸäŸÜ ÿßŸÑÿ£ŸäŸàÿ®Ÿä' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ÿ™ÿßÿ±ŸäÿÆŸäÿ©',    title: 'ŸÜÿßÿ®ŸÑŸäŸàŸÜ ÿ®ŸàŸÜÿßÿ®ÿ±ÿ™' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ÿ™ÿßÿ±ŸäÿÆŸäÿ©',    title: 'ÿßŸÑÿÆÿØŸäŸà ÿ•ÿ≥ŸÖÿßÿπŸäŸÑ' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ÿ™ÿßÿ±ŸäÿÆŸäÿ©',    title: 'ÿπŸÖÿ±Ÿà ÿ®ŸÜ ÿßŸÑÿπÿßÿµ' },
    { topic: 'ŸÉÿ™ÿßÿ® ŸÖÿπÿ±ŸàŸÅ',      title: 'ŸÑÿß ÿ™ŸÉŸÜ ŸÑÿ∑ŸäŸÅÿßŸã ÿ•ŸÑŸâ ÿØÿ±ÿ¨ÿ© ÿßŸÑŸÜŸÅÿßŸÇ' },
    { topic: 'ŸÉÿ™ÿßÿ® ŸÖÿπÿ±ŸàŸÅ',      title: 'ÿπÿ®ÿ± ŸàÿØÿ±Ÿàÿ®' },
    { topic: 'ŸÉÿ™ÿßÿ® ŸÖÿπÿ±ŸàŸÅ',      title: 'ŸÇŸàÿßÿπÿØ ÿßŸÑÿπÿ¥ŸÇ ÿßŸÑÿ£ÿ±ÿ®ÿπŸàŸÜ' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ŸÉÿ±ÿ™ŸàŸÜŸäÿ©',   title: 'ÿ≥ÿ®ŸàŸÜÿ¨ ÿ®Ÿàÿ®' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ŸÉÿ±ÿ™ŸàŸÜŸäÿ©',   title: 'ŸÖŸäŸÉŸä ŸÖÿßŸàÿ≥' },
    { topic: 'ÿ¥ÿÆÿµŸäÿ© ŸÉÿ±ÿ™ŸàŸÜŸäÿ©',   title: 'ÿ®ÿßÿ®ÿßŸä' },
    { topic: 'ÿ≠ŸäŸàÿßŸÜ',            title: 'ÿßŸÑÿ≤ÿ±ÿßŸÅÿ©' },
    { topic: 'ÿ≠ŸäŸàÿßŸÜ',            title: 'ÿßŸÑÿØŸÑŸÅŸäŸÜ' },
    { topic: 'ÿ≠ŸäŸàÿßŸÜ',            title: 'ÿßŸÑÿ™ŸÖÿ≥ÿßÿ≠' },
    { topic: 'ÿßÿÆÿ™ÿ±ÿßÿπ',           title: 'ÿßŸÑŸáÿßÿ™ŸÅ ÿßŸÑÿ∞ŸÉŸä' },
    { topic: 'ÿßÿÆÿ™ÿ±ÿßÿπ',           title: 'ÿßŸÑÿπÿ¨ŸÑÿ©' },
    { topic: 'ÿßÿÆÿ™ÿ±ÿßÿπ',           title: 'ÿßŸÑÿ•ŸÜÿ™ÿ±ŸÜÿ™' }];

  // ŸÜÿ™ÿßÿ¶ÿ¨ ŸÉŸÑ ŸÑÿßÿπÿ®
  const playerResults = players.map(name => ({
    name,
    roundPoints: 0,
    totalPoints: parseInt(localStorage.getItem(name)) || 0
  }));

  // DOM refs
  const backToGames            = document.getElementById('backToGamesBtnCharades');
  const startRulesBtn          = document.getElementById('startCharadesBtn');
  const backRulesBtn           = document.getElementById('backToRulesBtnCharades');
  const assignmentForm         = document.getElementById('teamAssignmentForm');
  const timeSlider             = document.getElementById('charadesTimeSlider');
  const timeValue              = document.getElementById('charadesTimeValue');
  const startGameBtn           = document.getElementById('startCharadesGameBtn');
  const passText               = document.getElementById('charadesPassText');
  const passNextBtn            = document.getElementById('charadesPassNextBtn');
  const topicEl                = document.getElementById('charadesTopic');
  const titleEl                = document.getElementById('charadesTitle');
  const timerEl                = document.getElementById('charadesTimer');
  const correctBtn             = document.getElementById('charadesCorrectBtn');
  const failBtn                = document.getElementById('charadesFailBtn');
  const changeBtn              = document.getElementById('charadesChangeBtn');
  const changeCountSpan        = document.getElementById('charadesChangeCount');
  const roundResultText        = document.getElementById('charadesRoundResultText');
  const roundResultsBody       = document.getElementById('charadesRoundResultsBody');
  const nextRoundBtn           = document.getElementById('charadesNextRoundBtn');
  const endGameBtn             = document.getElementById('charadesEndGameBtn');
  const finalBody              = document.getElementById('charadesFinalResultsBody');
  const replayBtn              = document.getElementById('charadesReplayBtn');
  const backBtn                = document.getElementById('charadesBackBtn');

  // ÿ™ŸÜŸÇŸÑ ÿ®ŸäŸÜ ÿßŸÑÿ¥ÿßÿ¥ÿßÿ™
  backToGames.onclick   = () => showScreen('gamesScreen');
  startRulesBtn.onclick = () => {
    if (players.length < 4) {
      showAlert('error', ' ŸÑÿπÿ®ÿ© ÿ®ÿØŸàŸÜ ŸÉŸÑÿßŸÖ ÿ™ÿ™ÿ∑ŸÑÿ® 4 ŸÑÿßÿπÿ®ŸäŸÜ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ ŸÑŸÑÿπÿ®! ÿ≠ÿßŸÑŸäÿßŸã: ' + players.length);
      return;
    } 
    showScreen('charadesSettingsScreen');
  }
  backRulesBtn.onclick  = () => showScreen('charadesRulesScreen');

  // ÿ™ŸÇÿ≥ŸäŸÖ ÿßŸÑŸÅÿ±ŸÇ
  function renderAssignment() {
    assignmentForm.innerHTML = '';
    players.forEach((p,i) => {
      const div = document.createElement('div');
      div.className = 'player-item';
      div.innerHTML = `
        <label>${p}</label>
        <label><input type="radio" name="team-${i}" value="A" checked> ŸÅÿ±ŸäŸÇ A</label>
        <label><input type="radio" name="team-${i}" value="B"> ŸÅÿ±ŸäŸÇ B</label>
      `;
      assignmentForm.appendChild(div);
    });
  }
  renderAssignment();

  // ÿ∂ÿ®ÿ∑ ÿßŸÑŸàŸÇÿ™
  timeSlider.oninput = e => {
    roundTime = +e.target.value;
    timeValue.textContent = `${roundTime}s`;
  };

  // ÿ®ÿØÿ° ÿßŸÑŸÑÿπÿ®ÿ©
  startGameBtn.onclick = () => {
    teamA = []; teamB = [];
    players.forEach((p,i) => {
      const sel = document.querySelector(`input[name="team-${i}"]:checked`).value;
      if (sel==='A') teamA.push(p);
      else           teamB.push(p);
    });
    if (teamA.length < 2 || teamB.length < 2) {
      return showAlert("warning",'Ÿäÿ¨ÿ® ÿ£ŸÜ Ÿäÿ≠ÿ™ŸàŸä ŸÉŸÑ ŸÅÿ±ŸäŸÇ ÿπŸÑŸâ ŸÑÿßÿπÿ®ŸäŸÜ ÿßÿ´ŸÜŸäŸÜ ÿπŸÑŸâ ÿßŸÑÿ£ŸÇŸÑ.');
    }
    actorIndex = 0;
    playerResults.forEach(pr => pr.roundPoints = 0);
    nextPass();
  };

  // ÿ™ŸÖÿ±Ÿäÿ± ÿßŸÑŸáÿßÿ™ŸÅ
  function nextPass() {
    currentPair = titles[Math.floor(Math.random()*titles.length)];
    const team = (actorIndex % 2 === 0) ? 'A' : 'B';
    passText.textContent = `üì± ÿßŸÑÿØŸàÿ± ÿπŸÑŸâ ŸÅÿ±ŸäŸÇ ${team} ŸÑÿ™ÿÆŸÖŸäŸÜ ÿßŸÑÿπŸÜŸàÿßŸÜ`;
    showScreen('charadesPassScreen');
  }
  passNextBtn.onclick = () => {
    topicEl.textContent       = `üîñ ÿßŸÑŸÖŸàÿ∂Ÿàÿπ: ${currentPair.topic}`;
    titleEl.textContent       = `üé¨ ÿßŸÑÿπŸÜŸàÿßŸÜ: ${currentPair.title}`;
    changeCount               = 2;
    changeCountSpan.textContent = changeCount;
    startTimer();
    showScreen('charadesGameScreen');
  };

  // ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖŸàÿ∂Ÿàÿπ
  changeBtn.onclick = () => {
    if (changeCount > 0) {
      changeCount--;
      changeCountSpan.textContent = changeCount;
      currentPair = titles[Math.floor(Math.random()*titles.length)];
      topicEl.textContent = `üîñ ÿßŸÑŸÖŸàÿ∂Ÿàÿπ: ${currentPair.topic}`;
      titleEl.textContent = `üé¨ ÿßŸÑÿπŸÜŸàÿßŸÜ: ${currentPair.title}`;
    } else {
      showAlert('error','ÿßŸÜÿ™Ÿáÿ™ ŸÅÿ±ÿµ ÿ™ÿ∫ŸäŸäÿ± ÿßŸÑŸÖŸàÿ∂Ÿàÿπ.');
    }
  };

  // ÿßŸÑŸÖÿ§ŸÇÿ™
  function startTimer() {
    clearInterval(timerId);
    let t = roundTime;
    timerEl.textContent = `${t}s`;
    timerId = setInterval(() => {
      t--; timerEl.textContent = `${t}s`;
      if (t <= 0) onFail();
    }, 1000);
  }

  // ŸÜÿ¨ÿßÿ≠ ÿßŸÑÿ™ŸÖÿ´ŸäŸÑ
  function onSuccess() {
    clearInterval(timerId);
    const winningTeam = (actorIndex % 2 === 0) ? teamB : teamA;
    winningTeam.forEach(name => {
      const pr = playerResults.find(r => r.name === name);
      pr.roundPoints += 20;
      pr.totalPoints += 20;
      localStorage.setItem(name, pr.totalPoints);
    });
    renderRoundResults();
    roundResultText.textContent = `‚úÖ ŸÅÿßÿ≤ ŸÅÿ±ŸäŸÇ ${(actorIndex % 2 === 0 ? 'B' : 'A')}! ŸÉŸÑ ŸÑÿßÿπÿ® +20 ŸÜŸÇÿ∑ÿ©`;
    showScreen('charadesRoundResultsScreen');
  }

  // ŸÅÿ¥ŸÑ ÿßŸÑÿ™ŸÖÿ´ŸäŸÑ
  function onFail() {
    clearInterval(timerId);
    renderRoundResults();
    roundResultText.textContent = `‚ùå ÿÆÿ∑ÿ£ ÿ£Ÿà ÿßŸÜÿ™ŸáŸâ ÿßŸÑŸàŸÇÿ™. ŸÑÿß ŸÜŸÇÿßÿ∑ ŸÑŸáÿ∞Ÿá ÿßŸÑÿ¨ŸàŸÑÿ©.`;
    showScreen('charadesRoundResultsScreen');
  }

  correctBtn.onclick = onSuccess;
  failBtn.onclick    = onFail;

  // ÿπÿ±ÿ∂ ÿ¨ÿØŸàŸÑ ŸÜÿ™ÿßÿ¶ÿ¨ Ÿáÿ∞Ÿá ÿßŸÑÿ¨ŸàŸÑÿ©
  function renderRoundResults() {
    // ÿ™ÿ±ÿ™Ÿäÿ® ŸÑÿßÿπÿ®ŸäŸÜ ÿ≠ÿ≥ÿ® ŸÜŸÇÿßÿ∑ ÿßŸÑÿ¨ŸàŸÑÿ© ÿ™ŸÜÿßÿ≤ŸÑŸäŸãÿß
    const sorted = [...playerResults].sort((a,b)=>b.roundPoints - a.roundPoints);
    roundResultsBody.innerHTML = sorted.map((r,i)=>`
      <tr>
        <td>${i+1}</td>
        <td>${r.name}</td>
        <td>${r.roundPoints}</td>
        <td>${r.totalPoints}</td>
      </tr>
    `).join('');
  }

  // ÿ®ÿπÿØ ÿßŸÜÿ™Ÿáÿßÿ° ÿßŸÑÿ¨ŸàŸÑÿ©
  nextRoundBtn.onclick = () => {
    actorIndex++;
    nextPass();
  };

  // ÿ•ŸÜŸáÿßÿ° ÿßŸÑŸÑÿπÿ®ÿ© Ÿàÿπÿ±ÿ∂ ÿßŸÑŸÜÿ™ÿßÿ¶ÿ¨ ÿßŸÑŸÉÿßŸÖŸÑÿ©
  endGameBtn.onclick = () => {
    const sorted = [...playerResults].sort((a,b)=>b.totalPoints - a.totalPoints);
    finalBody.innerHTML = sorted.map((r,i)=>`
      <tr>
        <td>${i+1}</td>
        <td>${r.name}</td>
        <td>${r.roundPoints}</td>
        <td>${r.totalPoints}</td>
      </tr>
    `).join('');
    showScreen('charadesFinalResultsScreen');
  };

  replayBtn.onclick = () => showScreen('charadesSettingsScreen');
  backBtn.onclick   = () => showScreen('gamesScreen');
});
